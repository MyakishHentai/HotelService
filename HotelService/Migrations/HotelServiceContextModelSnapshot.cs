// <auto-generated />
using System;
using HotelService.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HotelService.Migrations
{
    [DbContext(typeof(HotelServiceContext))]
    partial class HotelServiceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Cyrillic_General_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HotelService.Models.Base.Basket", b =>
                {
                    b.Property<int>("BasketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("CostTotal")
                        .HasColumnType("money");

                    b.Property<DateTime>("PaymentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("BasketId");

                    b.ToTable("Baskets");
                });

            modelBuilder.Entity("HotelService.Models.Base.Building", b =>
                {
                    b.Property<int>("BuildingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("AdministratorId")
                        .HasColumnType("int");

                    b.Property<string>("Descriprion")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("BuildingId");

                    b.HasIndex("AdministratorId");

                    b.HasIndex("ImageId");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("HotelService.Models.Base.CategoriesService", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descriprion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("SubCategoryId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId")
                        .HasName("PK__Categori__19093A0B4F1DEC63");

                    b.HasIndex("ImageId");

                    b.HasIndex("SubCategoryId");

                    b.HasIndex(new[] { "Name" }, "UQ__Categori__737584F6C4D2B1B1")
                        .IsUnique();

                    b.ToTable("CategoriesService");
                });

            modelBuilder.Entity("HotelService.Models.Base.Feedback", b =>
                {
                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("IssueDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<double>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("((5.0))");

                    b.Property<string>("Review")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("ClientId", "ServiceId")
                        .HasName("PK__Feedback__5A2FA124FB71E561");

                    b.HasIndex("ServiceId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("HotelService.Models.Base.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("ImageBin")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ImageFormat")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("ImageId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("HotelService.Models.Base.Request", b =>
                {
                    b.Property<int>("BasketId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<decimal>("CostTotal")
                        .HasColumnType("money");

                    b.Property<DateTime>("FormationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("RepeatTally")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("BasketId", "ServiceId")
                        .HasName("PK__Requests__338BCCB5D7AEC6E9");

                    b.HasIndex("ContractId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("HotelService.Models.Base.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("HotelService.Models.Base.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<decimal>("Cost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallmoney")
                        .HasDefaultValueSql("((5000.0000))");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("SleepingPlaces")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("('STD')");

                    b.HasKey("RoomId");

                    b.HasIndex("BuildingId");

                    b.HasIndex("ImageId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("HotelService.Models.Base.RoomContract", b =>
                {
                    b.Property<int>("ContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("ContractId")
                        .HasName("PK__RoomCont__C90D3469A56248D2");

                    b.HasIndex("ClientId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomContracts");
                });

            modelBuilder.Entity("HotelService.Models.Base.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<decimal>("Cost")
                        .HasColumnType("smallmoney");

                    b.Property<string>("Descriprion")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("Rating")
                        .HasColumnType("float");

                    b.Property<bool?>("RepeatState")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("ResponsWorker")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasDefaultValueSql("('Daily')");

                    b.HasKey("ServiceId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ImageId");

                    b.HasIndex("ResponsWorker");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("HotelService.Models.Base.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата рождения");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Имя");

                    b.Property<bool?>("ForeignerStatus")
                        .HasColumnType("bit")
                        .HasComment("Является инностранцем");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(3)")
                        .HasComment("Пол");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Фамилия");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Passport")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Паспорт");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Отчество/Матчество");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата регистрации");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("Passport")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("HotelService.Models.Base.WorkStaff", b =>
                {
                    b.Property<int>("WorkerId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("BasketId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValueSql("('Work done')");

                    b.Property<DateTime?>("OrderDoneDate")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("OrderTakeDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("WorkerId", "ServiceId", "BasketId")
                        .HasName("PK__WorkStaf__0FA2E951BFFB8515");

                    b.HasIndex("BasketId", "ServiceId");

                    b.ToTable("WorkStaff");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("HotelService.Models.Base.Building", b =>
                {
                    b.HasOne("HotelService.Models.Base.User", "Administrator")
                        .WithMany("Buildings")
                        .HasForeignKey("AdministratorId")
                        .HasConstraintName("FK__Buildings__Admin__300424B4")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HotelService.Models.Base.Image", "Image")
                        .WithMany("Buildings")
                        .HasForeignKey("ImageId")
                        .HasConstraintName("FK__Buildings__Image__2F10007B")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Administrator");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("HotelService.Models.Base.CategoriesService", b =>
                {
                    b.HasOne("HotelService.Models.Base.Image", "Image")
                        .WithMany("CategoriesServices")
                        .HasForeignKey("ImageId")
                        .HasConstraintName("FK__Categorie__Image__5535A963")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HotelService.Models.Base.CategoriesService", "SubCategory")
                        .WithMany("InverseSubCategory")
                        .HasForeignKey("SubCategoryId")
                        .HasConstraintName("FK__Categorie__SubCa__5441852A");

                    b.Navigation("Image");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("HotelService.Models.Base.Feedback", b =>
                {
                    b.HasOne("HotelService.Models.Base.User", "Client")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK__Feedback__Client__7E37BEF6")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelService.Models.Base.Service", "Service")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK__Feedback__Servic__7F2BE32F")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("HotelService.Models.Base.Request", b =>
                {
                    b.HasOne("HotelService.Models.Base.Basket", "Basket")
                        .WithMany("Requests")
                        .HasForeignKey("BasketId")
                        .HasConstraintName("FK__Requests__Basket__693CA210")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelService.Models.Base.RoomContract", "Contract")
                        .WithMany("Requests")
                        .HasForeignKey("ContractId")
                        .HasConstraintName("FK__Requests__Contra__6B24EA82")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelService.Models.Base.Service", "Service")
                        .WithMany("Requests")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK__Requests__Servic__6A30C649")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Basket");

                    b.Navigation("Contract");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("HotelService.Models.Base.Room", b =>
                {
                    b.HasOne("HotelService.Models.Base.Building", "Building")
                        .WithMany("Rooms")
                        .HasForeignKey("BuildingId")
                        .HasConstraintName("FK__Rooms__BuildingI__38996AB5")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelService.Models.Base.Image", "Image")
                        .WithMany("Rooms")
                        .HasForeignKey("ImageId")
                        .HasConstraintName("FK__Rooms__ImageId__37A5467C")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Building");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("HotelService.Models.Base.RoomContract", b =>
                {
                    b.HasOne("HotelService.Models.Base.User", "Client")
                        .WithMany("RoomContracts")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK__RoomContr__Clien__3B75D760")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelService.Models.Base.Room", "Room")
                        .WithMany("RoomContracts")
                        .HasForeignKey("RoomId")
                        .HasConstraintName("FK__RoomContr__RoomI__3C69FB99")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HotelService.Models.Base.Service", b =>
                {
                    b.HasOne("HotelService.Models.Base.CategoriesService", "Category")
                        .WithMany("Services")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK__Services__Catego__619B8048")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelService.Models.Base.Image", "Image")
                        .WithMany("Services")
                        .HasForeignKey("ImageId")
                        .HasConstraintName("FK__Services__ImageI__628FA481")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HotelService.Models.Base.User", "ResponsWorkerNavigation")
                        .WithMany("Services")
                        .HasForeignKey("ResponsWorker")
                        .HasConstraintName("FK__Services__Respon__60A75C0F")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");

                    b.Navigation("Image");

                    b.Navigation("ResponsWorkerNavigation");
                });

            modelBuilder.Entity("HotelService.Models.Base.User", b =>
                {
                    b.HasOne("HotelService.Models.Base.Image", "Image")
                        .WithMany("Users")
                        .HasForeignKey("ImageId");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("HotelService.Models.Base.WorkStaff", b =>
                {
                    b.HasOne("HotelService.Models.Base.User", "Worker")
                        .WithMany("WorkStaffs")
                        .HasForeignKey("WorkerId")
                        .HasConstraintName("FK__WorkStaff__Worke__778AC167")
                        .IsRequired();

                    b.HasOne("HotelService.Models.Base.Request", "Request")
                        .WithMany("WorkStaffs")
                        .HasForeignKey("BasketId", "ServiceId")
                        .HasConstraintName("FK__WorkStaff__787EE5A0")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("HotelService.Models.Base.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("HotelService.Models.Base.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("HotelService.Models.Base.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("HotelService.Models.Base.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelService.Models.Base.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("HotelService.Models.Base.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HotelService.Models.Base.Basket", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("HotelService.Models.Base.Building", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HotelService.Models.Base.CategoriesService", b =>
                {
                    b.Navigation("InverseSubCategory");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("HotelService.Models.Base.Image", b =>
                {
                    b.Navigation("Buildings");

                    b.Navigation("CategoriesServices");

                    b.Navigation("Rooms");

                    b.Navigation("Services");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("HotelService.Models.Base.Request", b =>
                {
                    b.Navigation("WorkStaffs");
                });

            modelBuilder.Entity("HotelService.Models.Base.Room", b =>
                {
                    b.Navigation("RoomContracts");
                });

            modelBuilder.Entity("HotelService.Models.Base.RoomContract", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("HotelService.Models.Base.Service", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("HotelService.Models.Base.User", b =>
                {
                    b.Navigation("Buildings");

                    b.Navigation("Feedbacks");

                    b.Navigation("RoomContracts");

                    b.Navigation("Services");

                    b.Navigation("WorkStaffs");
                });
#pragma warning restore 612, 618
        }
    }
}
